#!/bin/bash

# gitquick - Smart git add/commit/push with intelligent commit messages
# Usage: ./gitquick.sh [optional custom message]

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[gitquick]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[gitquick]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[gitquick]${NC} $1"
}

print_error() {
    echo -e "${RED}[gitquick]${NC} $1"
}

# Help function
show_help() {
    echo "gitquick - Smart git add/commit/push with intelligent commit messages"
    echo ""
    echo "Usage: gitquick [message]"
    echo ""
    echo "Options:"
    echo "  -h, --help     Show this help message"
    echo "  message        Custom commit message (optional)"
    echo ""
    echo "Examples:"
    echo "  gitquick                    # Auto-generate commit message"
    echo "  gitquick 'fix: bug in login' # Use custom message"
    echo ""
    echo "The script will:"
    echo "  1. Add all changes (git add -A)"
    echo "  2. Generate smart commit message based on file types"
    echo "  3. Commit with the message"
    echo "  4. Push to remote"
    echo ""
    echo "Smart message generation detects:"
    echo "  - Python files â†’ 'feat: update python code'"
    echo "  - JS/TS files â†’ 'feat: update javascript/typescript code'"
    echo "  - Config files â†’ 'config: update configuration files'"
    echo "  - Docs â†’ 'docs: update documentation'"
    echo "  - Docker â†’ 'docker: update container configuration'"
    echo "  - Scripts â†’ 'scripts: update shell scripts'"
    echo "  - Deletions â†’ 'cleanup: remove unused files'"
    echo "  - Renames â†’ 'refactor: reorganize files'"
}

# Check for help flag
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    show_help
    exit 0
fi

# Check if we're in a git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    print_error "Not in a git repository!"
    exit 1
fi

# Check if there are any changes to commit
if git diff-index --quiet HEAD --; then
    if git ls-files --others --exclude-standard | grep -q .; then
        print_warning "No changes to tracked files, but there are untracked files."
    else
        print_warning "No changes to commit!"
        exit 0
    fi
fi

# Function to generate smart commit message
generate_commit_message() {
    local staged_files=$(git diff --cached --name-only 2>/dev/null)
    local unstaged_files=$(git diff --name-only 2>/dev/null)
    local untracked_files=$(git ls-files --others --exclude-standard)
    
    local all_files="$staged_files $unstaged_files $untracked_files"
    
    if [ -z "$all_files" ]; then
        echo "update: minor changes"
        return
    fi
    
    # Analyze file types and changes
    local python_files=$(echo "$all_files" | grep -E '\.(py|pyx|pyi)$' | wc -l)
    local js_files=$(echo "$all_files" | grep -E '\.(js|jsx|ts|tsx)$' | wc -l)
    local config_files=$(echo "$all_files" | grep -E '\.(json|yaml|yml|toml|ini|cfg|conf)$' | wc -l)
    local doc_files=$(echo "$all_files" | grep -E '\.(md|txt|rst)$' | wc -l)
    local docker_files=$(echo "$all_files" | grep -E '(Dockerfile|docker-compose|\.dockerignore)' | wc -l)
    local script_files=$(echo "$all_files" | grep -E '\.(sh|bash|zsh)$' | wc -l)
    
    # Check for specific patterns in changes
    local has_new_files=$(echo "$all_files" | wc -l)
    local has_deletions=$(git diff --name-only --diff-filter=D 2>/dev/null | wc -l)
    local has_renames=$(git diff --name-only --diff-filter=R 2>/dev/null | wc -l)
    
    # Generate message based on what changed
    local message=""
    
    if [ $python_files -gt 0 ]; then
        if [ $python_files -eq 1 ]; then
            message="feat: update python code"
        else
            message="feat: update python files ($python_files files)"
        fi
    elif [ $js_files -gt 0 ]; then
        if [ $js_files -eq 1 ]; then
            message="feat: update javascript/typescript code"
        else
            message="feat: update js/ts files ($js_files files)"
        fi
    elif [ $config_files -gt 0 ]; then
        message="config: update configuration files"
    elif [ $doc_files -gt 0 ]; then
        message="docs: update documentation"
    elif [ $docker_files -gt 0 ]; then
        message="docker: update container configuration"
    elif [ $script_files -gt 0 ]; then
        message="scripts: update shell scripts"
    elif [ $has_deletions -gt 0 ]; then
        message="cleanup: remove unused files"
    elif [ $has_renames -gt 0 ]; then
        message="refactor: reorganize files"
    else
        message="update: general changes"
    fi
    
    # Add context if there are multiple types of changes
    local total_changes=$((python_files + js_files + config_files + doc_files + docker_files + script_files))
    if [ $total_changes -gt 1 ]; then
        message="$message + other updates"
    fi
    
    echo "$message"
}

# Main execution
print_status "Starting gitquick..."

# Add all changes
print_status "Adding all changes..."
git add -A

# Generate or use custom commit message
if [ $# -eq 0 ]; then
    commit_message=$(generate_commit_message)
    print_status "Generated commit message: $commit_message"
else
    commit_message="$1"
    print_status "Using custom commit message: $commit_message"
fi

# Commit
print_status "Committing changes..."
if git commit -m "$commit_message"; then
    print_success "Committed successfully!"
else
    print_error "Commit failed!"
    exit 1
fi

# Push
print_status "Pushing to remote..."
if git push; then
    print_success "Pushed successfully!"
else
    print_warning "Push failed - you may need to pull first or check your remote configuration."
    exit 1
fi

print_success "gitquick completed successfully! ðŸš€" 